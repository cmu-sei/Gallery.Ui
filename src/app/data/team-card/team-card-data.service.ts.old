// Copyright 2022 Carnegie Mellon University. All Rights Reserved.
// Released under a MIT (SEI)-style license. See LICENSE.md in the project root for license information.

import { Injectable, OnDestroy } from '@angular/core';
import { FormControl } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { ComnAuthQuery, ComnAuthService } from '@cmusei/crucible-common';
import { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';
import { filter, map, take, takeUntil } from 'rxjs/operators';
import { TeamCardService, CardService, TeamService } from 'src/app/generated/api/api/api';
import { Card, Team } from 'src/app/generated/api/model/models';

@Injectable({
  providedIn: 'root',
})
export class TeamCardDataService implements OnDestroy {
  private _teamCards: Card[] = [];
  readonly teamCards = new BehaviorSubject<Card[]>(this._teamCards);
  private _cardTeams: Team[] = [];
  readonly cardTeams = new BehaviorSubject<Team[]>(this._cardTeams);
  readonly filterControl = new FormControl();
  private filterTerm: Observable<string>;
  private sortColumn: Observable<string>;
  private sortIsAscending: Observable<boolean>;
  private pageSize: Observable<number>;
  private pageIndex: Observable<number>;
  unsubscribe$: Subject<null> = new Subject<null>();

  constructor(
    private cardService: CardService,
    private teamService: TeamService,
    private teamCardService: TeamCardService,
    private authQuery: ComnAuthQuery,
    private authService: ComnAuthService,
    private router: Router,
    activatedRoute: ActivatedRoute
  ) {}

  private updateCardTeams(teams: Team[]) {
    this._cardTeams = Object.assign([], teams);
    this.cardTeams.next(this._cardTeams);
  }

  private updateTeamCards(cards: Card[]) {
    this._teamCards = Object.assign([], cards);
    this.teamCards.next(this._teamCards);
  }

  getTeamCardsFromApi(teamId: string) {
    return this.cardService
      .getTeamCards(teamId)
      .pipe(take(1))
      .subscribe(
        (cards) => {
          this.updateTeamCards(cards);
        },
        (error) => {
          this.updateTeamCards([]);
        }
      );
  }

  getCardTeamsFromApi(cardId: string) {
    return this.teamService
      .getTeamsByCard(cardId)
      .pipe(take(1))
      .subscribe(
        (teams) => {
          this.updateCardTeams(teams);
        },
        (error) => {
          this.updateCardTeams([]);
        }
      );
  }

  add(teamId: string, card: Card) {
    this.teamCardService.createTeamCard({teamId: teamId, cardId: card.id}).subscribe(
      (tu) => {
        this._teamCards.unshift(card);
        this.updateTeamCards(this._teamCards);
      },
      (error) => {
        this.updateTeamCards(this._teamCards);
      }
    );
  }

  remove(teamId: string, cardId: string) {
    this.teamCardService.deleteTeamCardByIds(teamId, cardId).subscribe(
      (response) => {
        this._teamCards = this._teamCards.filter((u) => u.id !== cardId);
        this.updateTeamCards(this._teamCards);
      },
      (error) => {
        this.updateTeamCards(this._teamCards);
      }
    );
  }

  ngOnDestroy() {
    this.unsubscribe$.next(null);
    this.unsubscribe$.complete();
  }
}
